//
//  HomeViewModel.swift
//  cryptoApp-SUI-
//
//  Created by Borisov Nikita on 22.07.2023.
//

import Foundation
import Combine
import SwiftUI

class HomeViewModel: ObservableObject {
    
    
    @Published var statistics: [StatisticModel] = [
    ]
    
    @Published var allCoins: [CoinModel] = []
    @Published var portfolioCoins: [CoinModel] = []
    @Published var searchText: String = ""
    @Published var sortOption: SortOption = .holdings
    
    private let coinDataService = CoinDataService()
    private let marketDataService = MarketDataService()
    private var portfolioDataService = PortfolioDataService()
    
    ////cancellables —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏. –ö–æ–≥–¥–∞ –æ–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞, —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, —ç—Ç–æ —Ç–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
    private var cancellables = Set<AnyCancellable>()
    
    
    enum SortOption {
        
        case rank, rankReversed, holdings, holdingsReversed, price, priceReversed
        
    }
    
    init() {
        addSubscribers()
    }
    
    func addSubscribers() {
        
        //        dataService.$allCoins
        //            .sink { [weak self] (returnedCoins) in
        //                self?.allCoins = returnedCoins
        //            }
        //            .store(in: &cancellables)
        
        // update allCoins
        $searchText
        ////.combineLatest(dataService.$allCoins) - –º–µ—Ç–æ–¥ combineLatest –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ searchText –∏ dataService.$allCoins. –ö–æ–≥–¥–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
            .combineLatest(coinDataService.$allCoins, $sortOption)
        ////—ç—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä debounce –≤ Combine (—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Apple). –û–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–º—É –æ–±—ä–µ–∫—Ç—É (Observable) –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Å—Ç–æ—Ç–æ–π, —Å –∫–æ—Ç–æ—Ä–æ–π –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
            .debounce(for: .seconds(0.5), scheduler: DispatchQueue.main)
        //// –º–µ—Ç–æ–¥ map –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö (text –∏ startingCoins) –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
            .map(filtrAndSortCoins)
        ////. –º–µ—Ç–æ–¥ sink –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ map. –ö–æ–≥–¥–∞ –Ω–æ–≤—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã, —ç—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è. –û–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ allCoins  —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç.
            .sink { [weak self] (returnedCoins) in
                self?.allCoins = returnedCoins
            }
        ////. —ç—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç (Observable). cancellables —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏. –ö–æ–≥–¥–∞ –æ–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞, —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, —ç—Ç–æ —Ç–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
            .store(in: &cancellables)
        
        // updates Portfolio Coins with self.sortPortfolioCoinsIfNeeded()
        $allCoins
            .combineLatest(portfolioDataService.$savedEntities)
            .map(mapAllCoinsToPortfolioCoins)
            .sink { [weak self] (returnedPortfolioCoin) in
                guard let self = self else { return }
                self.portfolioCoins = self.sortPortfolioCoinsIfNeeded(coins: returnedPortfolioCoin)
            }
            .store(in: &cancellables)
        
        // updates marketData
        marketDataService.$marketData
            .combineLatest($portfolioCoins)
            .map(mapGlobalMarketData)
            .sink { [weak self] (returnedStat) in
                guard let self = self else { return }
                self.statistics = returnedStat
            }
            .store(in: &cancellables)
        
        
    }
    
    func reloadData() {
        coinDataService.getCoins()
        marketDataService.getData()
    }
    
    private func mapAllCoinsToPortfolioCoins(allCoins: [CoinModel], portfolioEntitis: [PortfolioEntity] ) -> [CoinModel] {
        allCoins
        .compactMap { (coin) -> CoinModel? in
            guard let entyti = portfolioEntitis.first(where: { $0.coinID == coin.id }) else {
                return nil
            }
            return coin.updateHoldings(amount: entyti.amount)
        }
    }
    
    func updatePortfolio(coin: CoinModel, amount: Double) {
        portfolioDataService.updatePortfolio(coin: coin, amount: amount)
    }
    
    private func filtrAndSortCoins(text: String, coins: [CoinModel], sort: SortOption ) -> [CoinModel] {
        var updateCoins = filtredCoins(text: text, coins: coins)
        sortCoins(sort: sort, coins: &updateCoins)
        return updateCoins
    }
    
    private func filtredCoins(text: String, coins: [CoinModel] ) -> [CoinModel] {
        ///–í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ map –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (coins). –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –æ–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –∏ –º–æ–Ω–µ—Ç—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞—Ö –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞—Ö —Å–æ–¥–µ—Ä–∂–∞–ª—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ [CoinModel].
        guard !text.isEmpty else {
            return coins
        }
        let lowercasedText = text.lowercased()
        return coins.filter { (coin) -> Bool in
            return coin.name.lowercased().contains(lowercasedText) ||
            coin.id.lowercased().contains(lowercasedText) ||
            coin.symbol.lowercased().contains(lowercasedText)
        }
    }
    // —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –º–æ–Ω–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–æ inout, –º–∞—Å—Å–∏–≤ –≤–∑—è—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –∞ –Ω–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ filtrAndSortCoins, –ø—Ä–∏ —Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ .sort –∞ –Ω–µ .sorted ü§Ø
    private func sortCoins(sort: SortOption, coins: inout [CoinModel]) {
        switch sort {
        case .rank, .holdings:
            coins.sort(by: { $0.rank < $1.rank })
        case .rankReversed, .holdingsReversed:
            coins.sort(by: { $0.rank > $1.rank })
        case .price:
            coins.sort(by: { $0.currentPrice > $1.currentPrice })
        case .priceReversed:
            coins.sort(by: { $0.currentPrice < $1.currentPrice })
        }
    }
    
    private func sortPortfolioCoinsIfNeeded(coins: [CoinModel]) -> [CoinModel] {
        switch sortOption {
        case .holdings:
            return coins.sorted(by: { $0.currentHoldingsValue > $1.currentHoldingsValue })
        case .holdingsReversed:
            return coins.sorted(by: { $0.currentHoldingsValue < $1.currentHoldingsValue })
        default:
            return coins
        }
    }
    
    private func mapGlobalMarketData(marketDtaModel: MarketDataModel?, portfolioCoins: [CoinModel]) -> [StatisticModel] {
        var stats: [StatisticModel] = []
        
        guard let data = marketDtaModel else {
            return stats
        }
        
        let marketCap = StatisticModel(title: "Market Cap", value: data.marketCap, percentageChange: data.marketCapChangePercentage24HUsd)
        let volume = StatisticModel(title: "24h Volume", value: data.volume)
        let btcDominance = StatisticModel(title: "BTC Dominance", value: data.btcDominance)
        
        let portfolioVlaue =
        portfolioCoins
            .map({ $0.currentHoldingsValue })
            .reduce(0, +)
        
        let previosValue =
        portfolioCoins
            .map { (coin) -> Double in
                let currentValue = coin.currentHoldingsValue
                let percentChange = coin.priceChangePercentage24H ?? 0 / 100
                let previosValue = currentValue / (1 + percentChange)
                return previosValue
            }
            .reduce(0, +)
        
        let percentageChange = ((portfolioVlaue - previosValue) * 100)
        
        let portfolio = StatisticModel(
            title: "Portfolio Value",
            value: portfolioVlaue.asCurrencyWith2Decimals(),
            percentageChange: percentageChange)
        
        stats.append(contentsOf:[
            marketCap,
            volume,
            btcDominance,
            portfolio
        ])
        return stats
    }
    
}
